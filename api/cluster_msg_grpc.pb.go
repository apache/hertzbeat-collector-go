//
// Licensed to the Apache Software Foundation (ASF) under one or more
// contributor license agreements.  See the NOTICE file distributed with
// this work for additional information regarding copyright ownership.
// The ASF licenses this file to You under the Apache License, Version 2.0
// (the "License"); you may not use this file except in compliance with
// the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: cluster_msg.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClusterMsgService_SendMsg_FullMethodName   = "/hertzbeat.apache.org.api.msg.ClusterMsgService/SendMsg"
	ClusterMsgService_StreamMsg_FullMethodName = "/hertzbeat.apache.org.api.msg.ClusterMsgService/StreamMsg"
)

// ClusterMsgServiceClient is the client API for ClusterMsgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// gRPC service for collector <-> manager communication
type ClusterMsgServiceClient interface {
	// 单次请求响应
	SendMsg(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	// 双向流式通信（可用于实时推送/心跳/任务下发等）
	StreamMsg(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Message, Message], error)
}

type clusterMsgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterMsgServiceClient(cc grpc.ClientConnInterface) ClusterMsgServiceClient {
	return &clusterMsgServiceClient{cc}
}

func (c *clusterMsgServiceClient) SendMsg(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, ClusterMsgService_SendMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterMsgServiceClient) StreamMsg(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Message, Message], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ClusterMsgService_ServiceDesc.Streams[0], ClusterMsgService_StreamMsg_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Message, Message]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClusterMsgService_StreamMsgClient = grpc.BidiStreamingClient[Message, Message]

// ClusterMsgServiceServer is the server API for ClusterMsgService service.
// All implementations must embed UnimplementedClusterMsgServiceServer
// for forward compatibility.
//
// gRPC service for collector <-> manager communication
type ClusterMsgServiceServer interface {
	// 单次请求响应
	SendMsg(context.Context, *Message) (*Message, error)
	// 双向流式通信（可用于实时推送/心跳/任务下发等）
	StreamMsg(grpc.BidiStreamingServer[Message, Message]) error
	mustEmbedUnimplementedClusterMsgServiceServer()
}

// UnimplementedClusterMsgServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClusterMsgServiceServer struct{}

func (UnimplementedClusterMsgServiceServer) SendMsg(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedClusterMsgServiceServer) StreamMsg(grpc.BidiStreamingServer[Message, Message]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMsg not implemented")
}
func (UnimplementedClusterMsgServiceServer) mustEmbedUnimplementedClusterMsgServiceServer() {}
func (UnimplementedClusterMsgServiceServer) testEmbeddedByValue()                           {}

// UnsafeClusterMsgServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterMsgServiceServer will
// result in compilation errors.
type UnsafeClusterMsgServiceServer interface {
	mustEmbedUnimplementedClusterMsgServiceServer()
}

func RegisterClusterMsgServiceServer(s grpc.ServiceRegistrar, srv ClusterMsgServiceServer) {
	// If the following call pancis, it indicates UnimplementedClusterMsgServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClusterMsgService_ServiceDesc, srv)
}

func _ClusterMsgService_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterMsgServiceServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterMsgService_SendMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterMsgServiceServer).SendMsg(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterMsgService_StreamMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClusterMsgServiceServer).StreamMsg(&grpc.GenericServerStream[Message, Message]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ClusterMsgService_StreamMsgServer = grpc.BidiStreamingServer[Message, Message]

// ClusterMsgService_ServiceDesc is the grpc.ServiceDesc for ClusterMsgService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterMsgService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hertzbeat.apache.org.api.msg.ClusterMsgService",
	HandlerType: (*ClusterMsgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMsg",
			Handler:    _ClusterMsgService_SendMsg_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMsg",
			Handler:       _ClusterMsgService_StreamMsg_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cluster_msg.proto",
}
